import { useState, useEffect, useCallback } from 'react';

const PROGRESS_KEY = 'spanishAppProgress';

export const useProgress = () => {
  const [completedLessons, setCompletedLessons] = useState(() => {
    try {
      const savedProgress = localStorage.getItem(PROGRESS_KEY);
      return savedProgress ? JSON.parse(savedProgress) : [];
    } catch (error) {
      console.error("Failed to load progress from localStorage", error);
      return [];
    }
  });

  useEffect(() => {
    try {
      localStorage.setItem(PROGRESS_KEY, JSON.stringify(completedLessons));
    } catch (error) {
      console.error("Failed to save progress to localStorage", error);
    }
  }, [completedLessons]);

  const markAsCompleted = useCallback((lessonId) => {
    if (!completedLessons.includes(lessonId)) {
      setCompletedLessons(prev => [...prev, lessonId]);
    }
  }, [completedLessons]);

  const isCompleted = useCallback((lessonId) => {
    return completedLessons.includes(lessonId);
  }, [completedLessons]);

  // üëá –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –°–ë–†–û–°–ê
  const resetProgress = useCallback(() => {
    if (window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å.")) {
      setCompletedLessons([]);
    }
  }, []);

  return { markAsCompleted, isCompleted, resetProgress };
};
